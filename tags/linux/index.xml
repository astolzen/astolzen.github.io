<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on astolzen.github.io</title>
    <link>http://astolzen.github.i0/tags/linux/</link>
    <description>Recent content in Linux on astolzen.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-DE</language>
    <lastBuildDate>Mon, 08 Dec 2014 15:49:30 +0000</lastBuildDate>
    
	<atom:link href="http://astolzen.github.i0/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dummy Interface</title>
      <link>http://astolzen.github.i0/index.php/2014/12/08/dummy-interface/</link>
      <pubDate>Mon, 08 Dec 2014 15:49:30 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/index.php/2014/12/08/dummy-interface/</guid>
      <description>Verschiedene Einsatzgebiete, wie unter anderem Offline-Demo-Setups von Cloud- und Virtualisierungsdiensten, erfordern ein Pseodo-Netzwerkinterface, auf das sich eine Bridge binden läßt. Der Linux Kernel unterstützt dazu das &amp;#8222;dummy&amp;#8220;-Interface. Allerdings generiert das System bei jedem Neustart ein neues Pseudo-Interface mit einer neuen MAC-Adresse, so dass die Netwerk-Konfiguration nach dem Reboot nicht mehr passt.
Abhilfe schafft ein kleinen Skript (in /etc/rc.local), welches beim Systemstart das Dummy-Interface erzeugt und ihm eine fixe MAC-Adresse zuweist:</description>
    </item>
    
    <item>
      <title>Verschlüsselte TAR-Backups erstellen</title>
      <link>http://astolzen.github.i0/post/2013verschluesselt_tar/</link>
      <pubDate>Wed, 13 Nov 2013 15:50:24 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2013verschluesselt_tar/</guid>
      <description>Wer TAR-Dateien auf Cloud-Speichern wie Dropbox oder Ubuntu One hinterlegen will, sollte diese verschlüsseln. Mit OpenSSL ist das auch kein großes Hexenwerk:
tar -czvf - quelle | openssl enc -aes-256-cbc -e &amp;gt; ziel_enc.tar.gz
Kurz nach dem Start fordert OpenSSL den Anwender auf, zwei mal ein passendes Passwort für die Verschlüsselung einzutippen.
Um das verschlüsselte Archiv zu entpacken genügt es, die folgende Kommandozeile im Zielverzteichnis auszuführen:
openssl enc -in ziel_enc.tar.gz -aes-256-cbc -d | tar -zxvf -</description>
    </item>
    
    <item>
      <title>rhev/ovirt Defekte Disk-Images aus der DB entfernen</title>
      <link>http://astolzen.github.i0/post/2013ovirt_disk_db/</link>
      <pubDate>Wed, 17 Jul 2013 10:53:26 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2013ovirt_disk_db/</guid>
      <description>Wenn es beim Import von Templates oder VMs aus der Export-Domain zu Problemen kommt, kann es sein, dass Disk-Images im Status &amp;#8222;locked&amp;#8220; bleiben. Das blockiert die importierte VM oder das Template, so dass diese sich nicht löschen lassen. In der Folge läßt sich die Export-Domain im Zweifelsfall nicht mehr abhängen.
Um den Fehler zu beheben, muss der Administrator die Disk-Images auf der Export-Domain manuell löschen und zudem die Einträge aus der Datenbank auf dem rhev-m/ovirt-Server händisch entfernen:</description>
    </item>
    
    <item>
      <title>Mapping von SG-Devices anzeigen</title>
      <link>http://astolzen.github.i0/post/2013sg_devices/</link>
      <pubDate>Mon, 10 Jun 2013 11:54:14 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2013sg_devices/</guid>
      <description>Um die Zuweisung von physischen SCSI-Geräten zu logischen devices darzustellen, gibt es ein simples Tool namens _sgmap. Das Binary befindet sich im Paket _sg3utils
&amp;lt;br /&amp;gt; yum install sg3_utils&amp;lt;br /&amp;gt; 
Dann liefert das Proramm die Zuweisungsliste:
`
sg_map
 /dev/sg0 /dev/sda
/dev/sg1 /dev/scd0
/dev/sg2 /dev/scd1
/dev/sg3 /dev/sdb
/dev/sg4 /dev/sdc
/dev/sg5 /dev/sdd
/dev/sg6
/dev/sg7 /dev/nst0
/dev/sg8
/dev/sg9 /dev/sde
/dev/sg10 /dev/sdf
/dev/sg11
/dev/sg12 /dev/sdg
/dev/sg13
`</description>
    </item>
    
    <item>
      <title>NAT forwarding auf Linux</title>
      <link>http://astolzen.github.i0/post/2013nat/</link>
      <pubDate>Mon, 03 Jun 2013 18:27:38 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2013nat/</guid>
      <description>IP-Forwarding im Kernel einschaten:
echo &amp;quot;1&amp;quot; &amp;gt; /proc/sys/net/ipv4/ip_forward
Um die Einstellung permanten zu machen, den entsprechenden Eintrag in /etc/sysctl.conf anpassen
Dann das NAT-Masquerading auf der Firewall für den externen Port aktivieren.
iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE
fertig.</description>
    </item>
    
    <item>
      <title>Konfiguration von VIOS auf Powerlinux7R2</title>
      <link>http://astolzen.github.i0/post/2013vios/</link>
      <pubDate>Fri, 15 Mar 2013 09:50:11 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2013vios/</guid>
      <description>Vios-Version abrufen (als padmin, nicht als root):ioslevel
Admin-User auf VIOS (AIX) = padmin
Die Korn Shell von padmin ist eingeschränkt und auf das Home-Directory beschränkt: Root-Access gibt es über oem_setup_env
Konfiguration des VIOS-Netzwerks über mktcpip (als padmin). Dann kann das weitere Setup der VMs und des VIOS via Web-Gui erfolgen.
Shell-Access zu VMS Shell-Access zu neuen virtuellen Maschinen ohne eigene IP läuft über eine JAVA-Console. Die ist aber recht wählerisch, was die auf dem Client instellierte JVM angeht.</description>
    </item>
    
  </channel>
</rss>