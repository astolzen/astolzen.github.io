<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rhel on astolzen.github.io</title>
    <link>http://astolzen.github.i0/tags/rhel/</link>
    <description>Recent content in Rhel on astolzen.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-DE</language>
    <lastBuildDate>Tue, 16 Dec 2014 16:05:06 +0000</lastBuildDate>
    
	<atom:link href="http://astolzen.github.i0/tags/rhel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Alle Pakete eines Repos entfernen</title>
      <link>http://astolzen.github.i0/post/2014pakete_entfernen/</link>
      <pubDate>Tue, 16 Dec 2014 16:05:06 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2014pakete_entfernen/</guid>
      <description>Alle Pakete eines bestimmten Channels oder Repositories lassen sich wie folgt entfernen:
yum remove $(yum list installed | grep ovirt | awk &#39;{ print $1 }&#39;)  Wobei ovirt hier für den Namen des Repostitries steht.</description>
    </item>
    
    <item>
      <title>Dummy Interface</title>
      <link>http://astolzen.github.i0/index.php/2014/12/08/dummy-interface/</link>
      <pubDate>Mon, 08 Dec 2014 15:49:30 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/index.php/2014/12/08/dummy-interface/</guid>
      <description>Verschiedene Einsatzgebiete, wie unter anderem Offline-Demo-Setups von Cloud- und Virtualisierungsdiensten, erfordern ein Pseodo-Netzwerkinterface, auf das sich eine Bridge binden läßt. Der Linux Kernel unterstützt dazu das &amp;#8222;dummy&amp;#8220;-Interface. Allerdings generiert das System bei jedem Neustart ein neues Pseudo-Interface mit einer neuen MAC-Adresse, so dass die Netwerk-Konfiguration nach dem Reboot nicht mehr passt.
Abhilfe schafft ein kleinen Skript (in /etc/rc.local), welches beim Systemstart das Dummy-Interface erzeugt und ihm eine fixe MAC-Adresse zuweist:</description>
    </item>
    
    <item>
      <title>Hwclock adjust</title>
      <link>http://astolzen.github.i0/post/2014hwclock/</link>
      <pubDate>Wed, 12 Nov 2014 16:19:00 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2014hwclock/</guid>
      <description>Beim Setzen der Hardware-Uhr (auch in einer VM) schreibt hwclock ein &amp;#8222;adjust file&amp;#8220; welches die Differenz der Hardware-Uhr (UTC) zur Systemzeit (GMT+1) ablegt. Ist die Differenz zwischen System- und Hardware-Zeit nicht korrekt konfiguriert, wird der Server/VM nach einem Neustart in der Zeit um eines Stunde abweichen. Abhilfe schafft es dann, die hwclock auf die locale Zeit zu zwingen:
ntpdate ptbtime1.ptb.de hwclock -w --localtime  oder einfach zur Sicherheit das Adjust-File löschen</description>
    </item>
    
    <item>
      <title>rhev/ovirt Export Domain bereinigen</title>
      <link>http://astolzen.github.i0/post/2014export_domain/</link>
      <pubDate>Wed, 02 Apr 2014 16:28:32 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2014export_domain/</guid>
      <description>Wurde eine Export Domain nicht sauber von einem Data Center getrennt, läßt sie sich nicht an ein anderes DC anbinden. Dieses Problem läßt sich manuell bereinigen:
Auf der Export-Domain in das Verzeichnis /dom_md wechseln und die Datei metadata editieren:
Der Eintrag
SPUUID=12345678-1234-1234-1234-1234567890a
verweist auf die UUID des zuletzt angebundenen Data Centers. Diese einfach entfernen:
SPUUID=
und zudem die komplette Zeile
_SHA_CKSUM
aus der Datei löschen.
Anschliessend läßt sich die Export Domain wieder an ein DC anbinden.</description>
    </item>
    
    <item>
      <title>Gluster UUID modifizieren</title>
      <link>http://astolzen.github.i0/post/2014gluster_uuid/</link>
      <pubDate>Mon, 24 Feb 2014 16:36:25 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2014gluster_uuid/</guid>
      <description>Erstellt man in einer virtualisierten Testumgebung mehrere GlusterFS-Nodes aus einem einzigen Template, wird GlusterFS nicht funktionieren, da alle Nodes mit der gleichen UUID arbeiten. Bevor der Verwalter die Peers zu einem Verband zusammenfügt, brauchen die Nodes daher neue, eindeutige UUIDs.
Diese IDs sicher Gluster in /var/lib/glusterd/glusterd.info
Es genügt, diese Datei zu Löschen und den Dienst neu zu starten, um eine neue ID generieren zu lassen:
service glusterd stop rm -f /var/lib/glusterd/glusterd.</description>
    </item>
    
    <item>
      <title>Postgres Spalten finden</title>
      <link>http://astolzen.github.i0/post/2013postgres/</link>
      <pubDate>Tue, 17 Dec 2013 16:43:15 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2013postgres/</guid>
      <description>Um in einer Postgres Datenbank die Tabellen zu finden, welche eine bestimmte Spalte enthalten genügt folgendes Kommando:
select table_name from information_schema.columns where column_name = &#39;Spaltenname&#39;;</description>
    </item>
    
    <item>
      <title>UUID für RHEV oder ovirt erstellen</title>
      <link>http://astolzen.github.i0/post/2013uuid_erstellen/</link>
      <pubDate>Mon, 16 Dec 2013 16:45:28 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2013uuid_erstellen/</guid>
      <description>Ein Hypervisor Node für ovirt oder RHEV bekommt eine eindeutige UUID. Diese errechnet sich via dmidecode aus der BIOS-Seriennummer. Simple Whitebox-Server haben aber oft keine individuelle Serien-Nummer im Bios. Setzt man eine ovirt/RHEV-Umgebung mit solchen Serversystemen auf, bekommen alle Hypervisor-Nodes die gleiche UUID und das RHEV/ovirt-Setup schlägt fehl.
Um das zu vermeiden kann der Verwalter, vor der Installation des Hypervisors und dessen ovirt/RHEV-Steuerdaemons vdsm, eine zufällige UUID für das jeweilige System erzeugen:</description>
    </item>
    
    <item>
      <title>Redhat / Fedora. Wlan ohne Network Manager konfigurieren</title>
      <link>http://astolzen.github.i0/post/2013wlan_ohnenm/</link>
      <pubDate>Wed, 16 Oct 2013 16:13:06 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2013wlan_ohnenm/</guid>
      <description>Es gibt eine ganze Reihe verschiedener Einsatzgebiete, in denen WLAN-Adapter unter Linux ohne GUI laufen müssen. Hier ist NetworkManager als Netzwerk-Daemon eher hinderlich &amp;#8212; in Servern schaltet man ihn ohnehin ab.
Die Einrichtung eines WLAN-Adapters auf der CLI funktioniert auch ohne NetworkManager recht simpel.
Namen des Wireless-Interfaces ermitteln: iwconfig
Listet alle Interfaces auf und zeigt diejenigen mit Wireless Extensions.
NetworkManager abschalten und deaktivieren. EL6:
service NetworkManager stop chkconfig NetworkManager off  Fedora19+ / RHEL7:</description>
    </item>
    
    <item>
      <title>rhev/ovirt Defekte Disk-Images aus der DB entfernen</title>
      <link>http://astolzen.github.i0/post/2013ovirt_disk_db/</link>
      <pubDate>Wed, 17 Jul 2013 10:53:26 +0000</pubDate>
      
      <guid>http://astolzen.github.i0/post/2013ovirt_disk_db/</guid>
      <description>Wenn es beim Import von Templates oder VMs aus der Export-Domain zu Problemen kommt, kann es sein, dass Disk-Images im Status &amp;#8222;locked&amp;#8220; bleiben. Das blockiert die importierte VM oder das Template, so dass diese sich nicht löschen lassen. In der Folge läßt sich die Export-Domain im Zweifelsfall nicht mehr abhängen.
Um den Fehler zu beheben, muss der Administrator die Disk-Images auf der Export-Domain manuell löschen und zudem die Einträge aus der Datenbank auf dem rhev-m/ovirt-Server händisch entfernen:</description>
    </item>
    
  </channel>
</rss>